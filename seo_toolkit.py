
import streamlit as st
from PIL import Image
from io import BytesIO
import openai

st.set_page_config(page_title="Herramienta SEO Todo-en-Uno", layout="wide")
st.title("üß† Herramienta SEO Todo-en-Uno")

# üîë Campo para API Keys
st.sidebar.title("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")
openai_api_key = st.sidebar.text_input("OpenAI API Key", type="password")

# üß† Generador de art√≠culo SEO
def generar_articulo(keyword):
    if not openai_api_key:
        return {
            "titulo": f"C√≥mo optimizar tu sitio para '{keyword}'",
            "meta": f"Descubre c√≥mo mejorar el SEO de tu sitio usando la palabra clave '{keyword}'.",
            "contenido": f"""
## Introducci√≥n

El SEO es clave para aumentar el tr√°fico web. Hoy te mostraremos c√≥mo usar '{keyword}' efectivamente.

### Paso 1: Investigaci√≥n de palabras clave
Encuentra variaciones √∫tiles como '{keyword} barato', '{keyword} en 2025', etc.

### Paso 2: Contenido optimizado
Escribe art√≠culos relevantes, como este.

### Paso 3: T√©cnica On-Page
Incluye '{keyword}' en t√≠tulos, encabezados y descripciones.

### Conclusi√≥n
Aplicar '{keyword}' puede mejorar tus rankings notablemente.
"""
        }
    else:
        openai.api_key = openai_api_key
        respuesta = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "Eres un redactor experto en SEO."},
                {"role": "user", "content": f"Escribe un art√≠culo SEO completo sobre '{keyword}' con introducci√≥n, pasos pr√°cticos y conclusi√≥n."}
            ],
            max_tokens=900,
            temperature=0.7
        )
        contenido = respuesta["choices"][0]["message"]["content"]
        return {
            "titulo": f"Gu√≠a completa sobre '{keyword}'",
            "meta": f"Aprende c√≥mo posicionar mejor usando la palabra clave '{keyword}'.",
            "contenido": contenido
        }

# üñºÔ∏è Generador de imagen (puedes integrar DALL¬∑E si tienes clave)
def generar_imagen_desde_texto(texto):
    return Image.new("RGB", (512, 300), color="gray")

# ‚¨áÔ∏è Descargar art√≠culo como HTML
def descargar_como_html(titulo, contenido):
    html_content = f"<h1>{titulo}</h1>\n{contenido.replace('\n', '<br>')}"
    b = BytesIO()
    b.write(html_content.encode())
    b.seek(0)
    return b

# Interfaz de pesta√±as
tab1, tab2, tab3, tab4, tab5 = st.tabs([
    "üìù Generador de Art√≠culos",
    "üñºÔ∏è Generador de Im√°genes",
    "üîç An√°lisis SEO",
    "üîé Simulador SERP",
    "‚¨áÔ∏è Exportar"
])

with tab1:
    keyword = st.text_input("Introduce una palabra clave:")
    if st.button("Generar art√≠culo"):
        resultado = generar_articulo(keyword)
        st.subheader("T√≠tulo:")
        st.write(resultado["titulo"])
        st.subheader("Meta descripci√≥n:")
        st.write(resultado["meta"])
        st.subheader("Contenido:")
        st.text_area("Art√≠culo generado:", value=resultado["contenido"], height=300)

with tab2:
    texto_img = st.text_input("Describe la imagen que quieres generar:")
    if st.button("Generar imagen"):
        imagen = generar_imagen_desde_texto(texto_img)
        st.image(imagen, caption="Imagen generada")

with tab3:
    texto_seo = st.text_area("Pega aqu√≠ tu contenido para analizar:")
    if texto_seo:
        palabras = texto_seo.lower().split()
        long_total = len(texto_seo)
        densidad = {palabra: palabras.count(palabra) for palabra in set(palabras) if len(palabra) > 4}
        st.write("üîç Densidad de palabras clave (longitud > 4 letras):")
        st.write(sorted(densidad.items(), key=lambda x: -x[1])[:10])
        st.write(f"üßæ Longitud total del texto: {long_total} caracteres")

with tab4:
    titulo_serp = st.text_input("T√≠tulo SEO:")
    descripcion_serp = st.text_area("Meta descripci√≥n:")
    if titulo_serp or descripcion_serp:
        st.markdown("### Vista previa SERP")
        st.markdown(f"""
<div style='border:1px solid #ccc; padding:10px;'>
  <span style='color: #1a0dab; font-size:18px;'>{titulo_serp}</span><br>
  <span style='color: green;'>https://www.tusitio.com/{keyword.replace(" ", "-")}</span><br>
  <span>{descripcion_serp}</span>
</div>
""", unsafe_allow_html=True)

with tab5:
    if keyword:
        articulo = generar_articulo(keyword)
        archivo = descargar_como_html(articulo["titulo"], articulo["contenido"])
        st.download_button("üì• Descargar como HTML", data=archivo, file_name="articulo_seo.html", mime="text/html")
